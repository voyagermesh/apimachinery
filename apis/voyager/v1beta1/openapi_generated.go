// +build !ignore_autogenerated

/*
Copyright 2018 The Voyager Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/appscode/voyager/apis/voyager/v1beta1.ACMECertificateDetails": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"domain": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"certUrl": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"certStableUrl": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"accountRef": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"domain", "certUrl", "certStableUrl"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.AuthOption": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"basic": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.BasicAuth"),
							},
						},
						"tls": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.TLSAuth"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.BasicAuth", "github.com/appscode/voyager/apis/voyager/v1beta1.TLSAuth"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.BasicAuth": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"realm": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.Certificate": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.CertificateSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.CertificateStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateSpec", "github.com/appscode/voyager/apis/voyager/v1beta1.CertificateStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "request approval state, currently Approved or Denied.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "brief reason for the request state",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "human readable message with details about the request state",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastUpdateTime": {
							SchemaProps: spec.SchemaProps{
								Description: "timestamp for the last update to this condition",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"type"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateDetails": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"serialNumber": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"notBefore": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"notAfter": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"certURL": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"certStableURL": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"accountRef": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"certURL", "certStableURL"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.Certificate"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.Certificate", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"domains": {
							SchemaProps: spec.SchemaProps{
								Description: "Tries to obtain a single certificate using all domains passed into Domains. The first domain in domains is used for the CommonName field of the certificate, all other domains are added using the Subject Alternate Names extension.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"challengeProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "ChallengeProvider details to verify domains",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.ChallengeProvider"),
							},
						},
						"acmeUserSecretName": {
							SchemaProps: spec.SchemaProps{
								Description: "Secret contains ACMEUser information. Secret must contain a key `email` If empty tries to find an Secret via domains if not found create an ACMEUser and stores as a secret. Secrets key to be expected:\n ACME_EMAIL -> required, if not provided it will through error.\n ACME_SERVER_URL -> custom server url to generate certificates, default is lets encrypt.\n ACME_USER_DATA -> user data, if not found one will be created for the provided email,\n   and stored in the key.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage backend to store the certificates currently, kubernetes secret and vault.",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.CertificateStorage"),
							},
						},
						"provider": {
							SchemaProps: spec.SchemaProps{
								Description: "Following fields are deprecated and will removed in future version. https://github.com/appscode/voyager/pull/506 Deprecated. DNS Provider.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"email": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"httpProviderIngressReference": {
							SchemaProps: spec.SchemaProps{
								Description: "This is the ingress Reference that will be used if provider is http Deprecated",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference"),
							},
						},
						"providerCredentialSecretName": {
							SchemaProps: spec.SchemaProps{
								Description: "ProviderCredentialSecretName is used to create the acme client, that will do needed processing in DNS. Deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"acmeStagingURL": {
							SchemaProps: spec.SchemaProps{
								Description: "ACME server that will be used to obtain this certificate. Deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"challengeProvider", "acmeUserSecretName"},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateStorage", "github.com/appscode/voyager/apis/voyager/v1beta1.ChallengeProvider", "github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.CertificateCondition"),
										},
									},
								},
							},
						},
						"lastIssuedCertificate": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.CertificateDetails"),
							},
						},
						"certificateObtained": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"acmeUserSecretName": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"details": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.ACMECertificateDetails"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.ACMECertificateDetails", "github.com/appscode/voyager/apis/voyager/v1beta1.CertificateCondition", "github.com/appscode/voyager/apis/voyager/v1beta1.CertificateDetails", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.CertificateStorage": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"secret": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
							},
						},
						"vault": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.VaultStore"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.VaultStore", "k8s.io/api/core/v1.LocalObjectReference"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.ChallengeProvider": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"http": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.HTTPChallengeProvider"),
							},
						},
						"dns": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.DNSChallengeProvider"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.DNSChallengeProvider", "github.com/appscode/voyager/apis/voyager/v1beta1.HTTPChallengeProvider"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.DNSChallengeProvider": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"provider": {
							SchemaProps: spec.SchemaProps{
								Description: "DNS Provider from the list https://github.com/appscode/voyager/blob/master/docs/tasks/certificate/providers.md",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"credentialSecretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.DNSResolver": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"Name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"nameserver": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"checkHealth": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"retries": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"timeout": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"hold": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"Name", "nameserver", "checkHealth", "retries", "timeout", "hold"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.FrontendRule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "Port indicates the frontend port where HAProxy is listening for connection",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"rules": {
							SchemaProps: spec.SchemaProps{
								Description: "Serialized rules",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"auth": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.AuthOption"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.AuthOption", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPChallengeProvider": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"ingress": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressBackend": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "User can specify backend name for using it with custom acl Otherwise it will be generated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostNames": {
							SchemaProps: spec.SchemaProps{
								Description: "Host names to forward traffic to. If empty traffic will be forwarded to all subsets instance. If set only matched hosts will get the traffic. This is an handy way to send traffic to Specific StatefulSet pod. IE. Setting [web-0] will send traffic to only web-0 host for this StatefulSet, https://kubernetes.io/docs/tasks/stateful-application/basic-stateful-set/#creating-a-statefulset",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serviceName": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the name of the referenced service.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"servicePort": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the port of the referenced service.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"backendRules": {
							SchemaProps: spec.SchemaProps{
								Description: "Serialized HAProxy rules to apply on server backend including request, response or header rewrite. acls also can be used. https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#1",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"rewriteRule": {
							SchemaProps: spec.SchemaProps{
								Description: "Path rewrite rules with haproxy formatted regex.\n\nDeprecated: Use backendRule, will be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"headerRule": {
							SchemaProps: spec.SchemaProps{
								Description: "Header rules to modifies the header.\n\nDeprecated: Use backendRule, will be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressPath": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.",
					Properties: map[string]spec.Schema{
						"path": {
							SchemaProps: spec.SchemaProps{
								Description: "Path is a extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"backend": {
							SchemaProps: spec.SchemaProps{
								Description: "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressBackend"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressBackend"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressRuleValue": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
					Properties: map[string]spec.Schema{
						"address": {
							SchemaProps: spec.SchemaProps{
								Description: "The network address to listen HTTP(s) connections on.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "port to listen http(s) connections.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"noTLS": {
							SchemaProps: spec.SchemaProps{
								Description: "Set noTLS = true to force plain text. Else, auto detect like present",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"nodePort": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the node port of the referenced service.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"paths": {
							SchemaProps: spec.SchemaProps{
								Description: "A collection of paths that map requests to backends.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressPath"),
										},
									},
								},
							},
						},
					},
					Required: []string{"paths"},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressPath", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.Ingress": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Custom Ingress type for Voyager.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec is the desired state of the Ingress. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#spec-and-status",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.IngressSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status is the current state of the Ingress. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#spec-and-status",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.IngressStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.IngressSpec", "github.com/appscode/voyager/apis/voyager/v1beta1.IngressStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressBackend": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressBackend describes all endpoints for a given service and port.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "User can specify backend name for using it with custom acl Otherwise it will be generated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostNames": {
							SchemaProps: spec.SchemaProps{
								Description: "Host names to forward traffic to. If empty traffic will be forwarded to all subsets instance. If set only matched hosts will get the traffic. This is an handy way to send traffic to Specific StatefulSet pod. IE. Setting [web-0] will send traffic to only web-0 host for this StatefulSet, https://kubernetes.io/docs/tasks/stateful-application/basic-stateful-set/#creating-a-statefulset",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serviceName": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the name of the referenced service.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"servicePort": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the port of the referenced service.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"backendRules": {
							SchemaProps: spec.SchemaProps{
								Description: "Serialized HAProxy rules to apply on server backend including request, response or header rewrite. acls also can be used. https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#1",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressList is a collection of Ingress.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is the list of Ingress.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.Ingress"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.Ingress", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressRef": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"apiSchema": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"apiSchema", "name", "namespace"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressRule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
					Properties: map[string]spec.Schema{
						"host": {
							SchemaProps: spec.SchemaProps{
								Description: "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"http": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressRuleValue"),
							},
						},
						"tcp": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.TCPIngressRuleValue"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressRuleValue", "github.com/appscode/voyager/apis/voyager/v1beta1.TCPIngressRuleValue"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressRuleValue": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set.",
					Properties: map[string]spec.Schema{
						"http": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressRuleValue"),
							},
						},
						"tcp": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.TCPIngressRuleValue"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressRuleValue", "github.com/appscode/voyager/apis/voyager/v1beta1.TCPIngressRuleValue"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressSpec describes the Ingress the user wishes to exist.",
					Properties: map[string]spec.Schema{
						"backend": {
							SchemaProps: spec.SchemaProps{
								Description: "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressBackend"),
							},
						},
						"tls": {
							SchemaProps: spec.SchemaProps{
								Description: "TLS is the TLS configuration. Currently the Ingress only supports a single TLS port, 443, and assumes TLS termination. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.IngressTLS"),
										},
									},
								},
							},
						},
						"frontendRules": {
							SchemaProps: spec.SchemaProps{
								Description: "Frontend rules specifies a set of rules that should be applied in HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1 Only frontend sections can be applied here. It is up to user to provide valid set of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped with Ingress Rules according to port.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.FrontendRule"),
										},
									},
								},
							},
						},
						"rules": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.IngressRule"),
										},
									},
								},
							},
						},
						"loadBalancerSourceRanges": {
							SchemaProps: spec.SchemaProps{
								Description: "Optional: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature. https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
						"externalIPs": {
							SchemaProps: spec.SchemaProps{
								Description: "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.FrontendRule", "github.com/appscode/voyager/apis/voyager/v1beta1.HTTPIngressBackend", "github.com/appscode/voyager/apis/voyager/v1beta1.IngressRule", "github.com/appscode/voyager/apis/voyager/v1beta1.IngressTLS", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressStatus describe the current state of the Ingress.",
					Properties: map[string]spec.Schema{
						"loadBalancer": {
							SchemaProps: spec.SchemaProps{
								Description: "LoadBalancer contains the current status of the load-balancer.",
								Ref:         ref("k8s.io/api/core/v1.LoadBalancerStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.LoadBalancerStatus"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.IngressTLS": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "IngressTLS describes the transport layer security associated with an Ingress.",
					Properties: map[string]spec.Schema{
						"hosts": {
							SchemaProps: spec.SchemaProps{
								Description: "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing. Deprecated",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ref": {
							SchemaProps: spec.SchemaProps{
								Description: "Ref to used tls termination.",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.LocalTypedReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LocalTypedReference contains enough information to let you inspect or modify the referred object.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "API version of the referent.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.TCPIngressRuleValue": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"address": {
							SchemaProps: spec.SchemaProps{
								Description: "The network address to listen TCP connections on.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "port to listen tcp connections.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"noTLS": {
							SchemaProps: spec.SchemaProps{
								Description: "Set noTLS = true to force plain text. Else, auto detect like present",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"nodePort": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the node port of the referenced service.",
								Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
							},
						},
						"backend": {
							SchemaProps: spec.SchemaProps{
								Description: "Backend to forward the requests.",
								Ref:         ref("github.com/appscode/voyager/apis/voyager/v1beta1.IngressBackend"),
							},
						},
						"alpn": {
							SchemaProps: spec.SchemaProps{
								Description: "Application-Layer Protocol Negotiation (ALPN) is a Transport Layer Security (TLS) extension for application layer protocol negotiation. ALPN allows the application layer to negotiate which protocol should be performed over a secure connection in a manner which avoids additional round trips and which is independent of the application layer protocols. It is used by HTTP/2. If provided a list of alpn will be added to port as alpn option1,option2,... If SecretName is Provided this secret will be used to terminate SSL with alpn options. If Secret name is not provided backend server is responsible for handling SSL.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.IngressBackend", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.TLSAuth": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"verifyClient": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"headers": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"errorPage": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.Target": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"PodPort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"NodePort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"PodPort", "NodePort"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.VaultStore": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/appscode/voyager/apis/voyager/v1beta1.statsService": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"ing": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/appscode/voyager/apis/voyager/v1beta1.Ingress"),
							},
						},
					},
					Required: []string{"ing"},
				},
			},
			Dependencies: []string{
				"github.com/appscode/voyager/apis/voyager/v1beta1.Ingress"},
		},
	}
}
