// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloServiceClient interface {
	Intro(ctx context.Context, in *IntroRequest, opts ...grpc.CallOption) (*IntroResponse, error)
	Stream(ctx context.Context, in *IntroRequest, opts ...grpc.CallOption) (HelloService_StreamClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Intro(ctx context.Context, in *IntroRequest, opts ...grpc.CallOption) (*IntroResponse, error) {
	out := new(IntroResponse)
	err := c.cc.Invoke(ctx, "/voyagermesh.dev.hellogrpc.apis.hello.v1alpha1.HelloService/Intro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) Stream(ctx context.Context, in *IntroRequest, opts ...grpc.CallOption) (HelloService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloService_ServiceDesc.Streams[0], "/voyagermesh.dev.hellogrpc.apis.hello.v1alpha1.HelloService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_StreamClient interface {
	Recv() (*IntroResponse, error)
	grpc.ClientStream
}

type helloServiceStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceStreamClient) Recv() (*IntroResponse, error) {
	m := new(IntroResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
// All implementations must embed UnimplementedHelloServiceServer
// for forward compatibility
type HelloServiceServer interface {
	Intro(context.Context, *IntroRequest) (*IntroResponse, error)
	Stream(*IntroRequest, HelloService_StreamServer) error
	mustEmbedUnimplementedHelloServiceServer()
}

// UnimplementedHelloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (UnimplementedHelloServiceServer) Intro(context.Context, *IntroRequest) (*IntroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Intro not implemented")
}
func (UnimplementedHelloServiceServer) Stream(*IntroRequest, HelloService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedHelloServiceServer) mustEmbedUnimplementedHelloServiceServer() {}

// UnsafeHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServiceServer will
// result in compilation errors.
type UnsafeHelloServiceServer interface {
	mustEmbedUnimplementedHelloServiceServer()
}

func RegisterHelloServiceServer(s grpc.ServiceRegistrar, srv HelloServiceServer) {
	s.RegisterService(&HelloService_ServiceDesc, srv)
}

func _HelloService_Intro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Intro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voyagermesh.dev.hellogrpc.apis.hello.v1alpha1.HelloService/Intro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Intro(ctx, req.(*IntroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IntroRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).Stream(m, &helloServiceStreamServer{stream})
}

type HelloService_StreamServer interface {
	Send(*IntroResponse) error
	grpc.ServerStream
}

type helloServiceStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceStreamServer) Send(m *IntroResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HelloService_ServiceDesc is the grpc.ServiceDesc for HelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voyagermesh.dev.hellogrpc.apis.hello.v1alpha1.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Intro",
			Handler:    _HelloService_Intro_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _HelloService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/hello/v1alpha1/hello.proto",
}
