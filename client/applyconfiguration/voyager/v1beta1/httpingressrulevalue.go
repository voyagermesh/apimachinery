/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// HTTPIngressRuleValueApplyConfiguration represents an declarative configuration of the HTTPIngressRuleValue type for use
// with apply.
type HTTPIngressRuleValueApplyConfiguration struct {
	Address  *string                             `json:"address,omitempty"`
	Port     *intstr.IntOrString                 `json:"port,omitempty"`
	NoTLS    *bool                               `json:"noTLS,omitempty"`
	NodePort *intstr.IntOrString                 `json:"nodePort,omitempty"`
	ALPN     []string                            `json:"alpn,omitempty"`
	Proto    *string                             `json:"proto,omitempty"`
	Paths    []HTTPIngressPathApplyConfiguration `json:"paths,omitempty"`
}

// HTTPIngressRuleValueApplyConfiguration constructs an declarative configuration of the HTTPIngressRuleValue type for use with
// apply.
func HTTPIngressRuleValue() *HTTPIngressRuleValueApplyConfiguration {
	return &HTTPIngressRuleValueApplyConfiguration{}
}

// WithAddress sets the Address field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Address field is set to the value of the last call.
func (b *HTTPIngressRuleValueApplyConfiguration) WithAddress(value string) *HTTPIngressRuleValueApplyConfiguration {
	b.Address = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *HTTPIngressRuleValueApplyConfiguration) WithPort(value intstr.IntOrString) *HTTPIngressRuleValueApplyConfiguration {
	b.Port = &value
	return b
}

// WithNoTLS sets the NoTLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NoTLS field is set to the value of the last call.
func (b *HTTPIngressRuleValueApplyConfiguration) WithNoTLS(value bool) *HTTPIngressRuleValueApplyConfiguration {
	b.NoTLS = &value
	return b
}

// WithNodePort sets the NodePort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodePort field is set to the value of the last call.
func (b *HTTPIngressRuleValueApplyConfiguration) WithNodePort(value intstr.IntOrString) *HTTPIngressRuleValueApplyConfiguration {
	b.NodePort = &value
	return b
}

// WithALPN adds the given value to the ALPN field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ALPN field.
func (b *HTTPIngressRuleValueApplyConfiguration) WithALPN(values ...string) *HTTPIngressRuleValueApplyConfiguration {
	for i := range values {
		b.ALPN = append(b.ALPN, values[i])
	}
	return b
}

// WithProto sets the Proto field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Proto field is set to the value of the last call.
func (b *HTTPIngressRuleValueApplyConfiguration) WithProto(value string) *HTTPIngressRuleValueApplyConfiguration {
	b.Proto = &value
	return b
}

// WithPaths adds the given value to the Paths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Paths field.
func (b *HTTPIngressRuleValueApplyConfiguration) WithPaths(values ...*HTTPIngressPathApplyConfiguration) *HTTPIngressRuleValueApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPaths")
		}
		b.Paths = append(b.Paths, *values[i])
	}
	return b
}
