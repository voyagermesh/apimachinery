/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// IngressBackendApplyConfiguration represents an declarative configuration of the IngressBackend type for use
// with apply.
type IngressBackendApplyConfiguration struct {
	Name          *string             `json:"name,omitempty"`
	HostNames     []string            `json:"hostNames,omitempty"`
	ServiceName   *string             `json:"serviceName,omitempty"`
	ServicePort   *intstr.IntOrString `json:"servicePort,omitempty"`
	BackendRules  []string            `json:"backendRules,omitempty"`
	ALPN          []string            `json:"alpn,omitempty"`
	Proto         *string             `json:"proto,omitempty"`
	LoadBalanceOn *string             `json:"loadBalanceOn,omitempty"`
}

// IngressBackendApplyConfiguration constructs an declarative configuration of the IngressBackend type for use with
// apply.
func IngressBackend() *IngressBackendApplyConfiguration {
	return &IngressBackendApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *IngressBackendApplyConfiguration) WithName(value string) *IngressBackendApplyConfiguration {
	b.Name = &value
	return b
}

// WithHostNames adds the given value to the HostNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostNames field.
func (b *IngressBackendApplyConfiguration) WithHostNames(values ...string) *IngressBackendApplyConfiguration {
	for i := range values {
		b.HostNames = append(b.HostNames, values[i])
	}
	return b
}

// WithServiceName sets the ServiceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceName field is set to the value of the last call.
func (b *IngressBackendApplyConfiguration) WithServiceName(value string) *IngressBackendApplyConfiguration {
	b.ServiceName = &value
	return b
}

// WithServicePort sets the ServicePort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServicePort field is set to the value of the last call.
func (b *IngressBackendApplyConfiguration) WithServicePort(value intstr.IntOrString) *IngressBackendApplyConfiguration {
	b.ServicePort = &value
	return b
}

// WithBackendRules adds the given value to the BackendRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BackendRules field.
func (b *IngressBackendApplyConfiguration) WithBackendRules(values ...string) *IngressBackendApplyConfiguration {
	for i := range values {
		b.BackendRules = append(b.BackendRules, values[i])
	}
	return b
}

// WithALPN adds the given value to the ALPN field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ALPN field.
func (b *IngressBackendApplyConfiguration) WithALPN(values ...string) *IngressBackendApplyConfiguration {
	for i := range values {
		b.ALPN = append(b.ALPN, values[i])
	}
	return b
}

// WithProto sets the Proto field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Proto field is set to the value of the last call.
func (b *IngressBackendApplyConfiguration) WithProto(value string) *IngressBackendApplyConfiguration {
	b.Proto = &value
	return b
}

// WithLoadBalanceOn sets the LoadBalanceOn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoadBalanceOn field is set to the value of the last call.
func (b *IngressBackendApplyConfiguration) WithLoadBalanceOn(value string) *IngressBackendApplyConfiguration {
	b.LoadBalanceOn = &value
	return b
}
