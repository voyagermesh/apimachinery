/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// OAuthApplyConfiguration represents an declarative configuration of the OAuth type for use
// with apply.
type OAuthApplyConfiguration struct {
	Host        *string  `json:"host,omitempty"`
	AuthBackend *string  `json:"authBackend,omitempty"`
	AuthPath    *string  `json:"authPath,omitempty"`
	SigninPath  *string  `json:"signinPath,omitempty"`
	Paths       []string `json:"paths,omitempty"`
}

// OAuthApplyConfiguration constructs an declarative configuration of the OAuth type for use with
// apply.
func OAuth() *OAuthApplyConfiguration {
	return &OAuthApplyConfiguration{}
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *OAuthApplyConfiguration) WithHost(value string) *OAuthApplyConfiguration {
	b.Host = &value
	return b
}

// WithAuthBackend sets the AuthBackend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthBackend field is set to the value of the last call.
func (b *OAuthApplyConfiguration) WithAuthBackend(value string) *OAuthApplyConfiguration {
	b.AuthBackend = &value
	return b
}

// WithAuthPath sets the AuthPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthPath field is set to the value of the last call.
func (b *OAuthApplyConfiguration) WithAuthPath(value string) *OAuthApplyConfiguration {
	b.AuthPath = &value
	return b
}

// WithSigninPath sets the SigninPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SigninPath field is set to the value of the last call.
func (b *OAuthApplyConfiguration) WithSigninPath(value string) *OAuthApplyConfiguration {
	b.SigninPath = &value
	return b
}

// WithPaths adds the given value to the Paths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Paths field.
func (b *OAuthApplyConfiguration) WithPaths(values ...string) *OAuthApplyConfiguration {
	for i := range values {
		b.Paths = append(b.Paths, values[i])
	}
	return b
}
