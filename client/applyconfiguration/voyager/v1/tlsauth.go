/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "voyagermesh.dev/apimachinery/apis/voyager/v1"
)

// TLSAuthApplyConfiguration represents an declarative configuration of the TLSAuth type for use
// with apply.
type TLSAuthApplyConfiguration struct {
	SecretName   *string                 `json:"secretName,omitempty"`
	VerifyClient *v1.TLSAuthVerifyOption `json:"verifyClient,omitempty"`
	Headers      map[string]string       `json:"headers,omitempty"`
	ErrorPage    *string                 `json:"errorPage,omitempty"`
}

// TLSAuthApplyConfiguration constructs an declarative configuration of the TLSAuth type for use with
// apply.
func TLSAuth() *TLSAuthApplyConfiguration {
	return &TLSAuthApplyConfiguration{}
}

// WithSecretName sets the SecretName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretName field is set to the value of the last call.
func (b *TLSAuthApplyConfiguration) WithSecretName(value string) *TLSAuthApplyConfiguration {
	b.SecretName = &value
	return b
}

// WithVerifyClient sets the VerifyClient field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VerifyClient field is set to the value of the last call.
func (b *TLSAuthApplyConfiguration) WithVerifyClient(value v1.TLSAuthVerifyOption) *TLSAuthApplyConfiguration {
	b.VerifyClient = &value
	return b
}

// WithHeaders puts the entries into the Headers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Headers field,
// overwriting an existing map entries in Headers field with the same key.
func (b *TLSAuthApplyConfiguration) WithHeaders(entries map[string]string) *TLSAuthApplyConfiguration {
	if b.Headers == nil && len(entries) > 0 {
		b.Headers = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Headers[k] = v
	}
	return b
}

// WithErrorPage sets the ErrorPage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ErrorPage field is set to the value of the last call.
func (b *TLSAuthApplyConfiguration) WithErrorPage(value string) *TLSAuthApplyConfiguration {
	b.ErrorPage = &value
	return b
}
