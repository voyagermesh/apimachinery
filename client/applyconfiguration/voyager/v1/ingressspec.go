/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// IngressSpecApplyConfiguration represents an declarative configuration of the IngressSpec type for use
// with apply.
type IngressSpecApplyConfiguration struct {
	DefaultBackend                *IngressBackendApplyConfiguration  `json:"defaultBackend,omitempty"`
	TLS                           []IngressTLSApplyConfiguration     `json:"tls,omitempty"`
	ConfigVolumes                 []VolumeSourceApplyConfiguration   `json:"configVolumes,omitempty"`
	FrontendRules                 []FrontendRuleApplyConfiguration   `json:"frontendRules,omitempty"`
	Rules                         []IngressRuleApplyConfiguration    `json:"rules,omitempty"`
	LoadBalancerSourceRanges      []string                           `json:"loadBalancerSourceRanges,omitempty"`
	Resources                     *corev1.ResourceRequirements       `json:"resources,omitempty"`
	NodeSelector                  map[string]string                  `json:"nodeSelector,omitempty"`
	Affinity                      *corev1.Affinity                   `json:"affinity,omitempty"`
	SchedulerName                 *string                            `json:"schedulerName,omitempty"`
	Tolerations                   []corev1.Toleration                `json:"tolerations,omitempty"`
	ImagePullSecrets              []corev1.LocalObjectReference      `json:"imagePullSecrets,omitempty"`
	PriorityClassName             *string                            `json:"priorityClassName,omitempty"`
	Priority                      *int32                             `json:"priority,omitempty"`
	SecurityContext               *corev1.PodSecurityContext         `json:"securityContext,omitempty"`
	ProxySecurityContext          *corev1.SecurityContext            `json:"proxySecurityContext,omitempty"`
	ExternalIPs                   []string                           `json:"externalIPs,omitempty"`
	LivenessProbe                 *corev1.Probe                      `json:"livenessProbe,omitempty"`
	ReadinessProbe                *corev1.Probe                      `json:"readinessProbe,omitempty"`
	TerminationGracePeriodSeconds *int64                             `json:"terminationGracePeriodSeconds,omitempty"`
	Coordinator                   *CoordinatorSpecApplyConfiguration `json:"coordinator,omitempty"`
}

// IngressSpecApplyConfiguration constructs an declarative configuration of the IngressSpec type for use with
// apply.
func IngressSpec() *IngressSpecApplyConfiguration {
	return &IngressSpecApplyConfiguration{}
}

// WithDefaultBackend sets the DefaultBackend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultBackend field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithDefaultBackend(value *IngressBackendApplyConfiguration) *IngressSpecApplyConfiguration {
	b.DefaultBackend = value
	return b
}

// WithTLS adds the given value to the TLS field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TLS field.
func (b *IngressSpecApplyConfiguration) WithTLS(values ...*IngressTLSApplyConfiguration) *IngressSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTLS")
		}
		b.TLS = append(b.TLS, *values[i])
	}
	return b
}

// WithConfigVolumes adds the given value to the ConfigVolumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConfigVolumes field.
func (b *IngressSpecApplyConfiguration) WithConfigVolumes(values ...*VolumeSourceApplyConfiguration) *IngressSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConfigVolumes")
		}
		b.ConfigVolumes = append(b.ConfigVolumes, *values[i])
	}
	return b
}

// WithFrontendRules adds the given value to the FrontendRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FrontendRules field.
func (b *IngressSpecApplyConfiguration) WithFrontendRules(values ...*FrontendRuleApplyConfiguration) *IngressSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFrontendRules")
		}
		b.FrontendRules = append(b.FrontendRules, *values[i])
	}
	return b
}

// WithRules adds the given value to the Rules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Rules field.
func (b *IngressSpecApplyConfiguration) WithRules(values ...*IngressRuleApplyConfiguration) *IngressSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRules")
		}
		b.Rules = append(b.Rules, *values[i])
	}
	return b
}

// WithLoadBalancerSourceRanges adds the given value to the LoadBalancerSourceRanges field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LoadBalancerSourceRanges field.
func (b *IngressSpecApplyConfiguration) WithLoadBalancerSourceRanges(values ...string) *IngressSpecApplyConfiguration {
	for i := range values {
		b.LoadBalancerSourceRanges = append(b.LoadBalancerSourceRanges, values[i])
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithResources(value corev1.ResourceRequirements) *IngressSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *IngressSpecApplyConfiguration) WithNodeSelector(entries map[string]string) *IngressSpecApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithAffinity(value corev1.Affinity) *IngressSpecApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithSchedulerName sets the SchedulerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulerName field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithSchedulerName(value string) *IngressSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *IngressSpecApplyConfiguration) WithTolerations(values ...corev1.Toleration) *IngressSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *IngressSpecApplyConfiguration) WithImagePullSecrets(values ...corev1.LocalObjectReference) *IngressSpecApplyConfiguration {
	for i := range values {
		b.ImagePullSecrets = append(b.ImagePullSecrets, values[i])
	}
	return b
}

// WithPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PriorityClassName field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithPriorityClassName(value string) *IngressSpecApplyConfiguration {
	b.PriorityClassName = &value
	return b
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithPriority(value int32) *IngressSpecApplyConfiguration {
	b.Priority = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithSecurityContext(value corev1.PodSecurityContext) *IngressSpecApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithProxySecurityContext sets the ProxySecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProxySecurityContext field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithProxySecurityContext(value corev1.SecurityContext) *IngressSpecApplyConfiguration {
	b.ProxySecurityContext = &value
	return b
}

// WithExternalIPs adds the given value to the ExternalIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalIPs field.
func (b *IngressSpecApplyConfiguration) WithExternalIPs(values ...string) *IngressSpecApplyConfiguration {
	for i := range values {
		b.ExternalIPs = append(b.ExternalIPs, values[i])
	}
	return b
}

// WithLivenessProbe sets the LivenessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LivenessProbe field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithLivenessProbe(value corev1.Probe) *IngressSpecApplyConfiguration {
	b.LivenessProbe = &value
	return b
}

// WithReadinessProbe sets the ReadinessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadinessProbe field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithReadinessProbe(value corev1.Probe) *IngressSpecApplyConfiguration {
	b.ReadinessProbe = &value
	return b
}

// WithTerminationGracePeriodSeconds sets the TerminationGracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TerminationGracePeriodSeconds field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithTerminationGracePeriodSeconds(value int64) *IngressSpecApplyConfiguration {
	b.TerminationGracePeriodSeconds = &value
	return b
}

// WithCoordinator sets the Coordinator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Coordinator field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithCoordinator(value *CoordinatorSpecApplyConfiguration) *IngressSpecApplyConfiguration {
	b.Coordinator = value
	return b
}
