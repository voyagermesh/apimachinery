---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app: voyager
  name: ingresses.voyager.appscode.com
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.rules[0].host
    name: HOSTS
    type: string
  - JSONPath: .status.loadBalancer.ingress
    name: LOAD_BALANCER_IP
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: AGE
    type: date
  group: voyager.appscode.com
  names:
    categories:
    - networking
    - appscode
    - all
    kind: Ingress
    plural: ingresses
    shortNames:
    - ing
    singular: ingress
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          description: ObjectMeta is metadata that all persisted resources must have,
            which includes all objects users must create.
          properties:
            annotations:
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
            clusterName:
              description: The name of the cluster which the object belongs to. This
                is used to distinguish resources with same name and namespace in different
                clusters. This field is not set anywhere right now and apiserver is
                going to ignore it if set in create or update request.
              type: string
            creationTimestamp:
              description: Time is a wrapper around time.Time which supports correct
                marshaling to YAML and JSON.  Wrappers are provided for many of the
                factory methods that the time package offers.
              format: date-time
              type: string
            deletionGracePeriodSeconds:
              description: Number of seconds allowed for this object to gracefully
                terminate before it will be removed from the system. Only set when
                deletionTimestamp is also set. May only be shortened. Read-only.
              format: int64
              type: integer
            deletionTimestamp:
              description: Time is a wrapper around time.Time which supports correct
                marshaling to YAML and JSON.  Wrappers are provided for many of the
                factory methods that the time package offers.
              format: date-time
              type: string
            finalizers:
              description: Must be empty before the object is deleted from the registry.
                Each entry is an identifier for the responsible component that will
                remove the entry from the list. If the deletionTimestamp of the object
                is non-nil, entries in this list can only be removed.
              items:
                type: string
              type: array
            generateName:
              description: |-
                GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

                If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

                Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
              type: string
            generation:
              description: A sequence number representing a specific generation of
                the desired state. Populated by the system. Read-only.
              format: int64
              type: integer
            initializers:
              description: Initializers tracks the progress of initialization.
              properties:
                pending:
                  description: Pending is a list of initializers that must execute
                    in order before this object is visible. When the last pending
                    initializer is removed, and no failing result is set, the initializers
                    struct will be set to nil and the object is considered as initialized
                    and visible to all clients.
                  items:
                    description: Initializer is information about an initializer that
                      has not yet completed.
                    properties:
                      name:
                        description: name of the process that is responsible for initializing
                          this object.
                        type: string
                    required:
                    - name
                  type: array
                result:
                  description: Status is a return value for calls that don't return
                    other objects.
                  properties:
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                      type: string
                    code:
                      description: Suggested HTTP return code for this status, 0 if
                        not set.
                      format: int32
                      type: integer
                    details:
                      description: StatusDetails is a set of additional properties
                        that MAY be set by the server to provide additional information
                        about a response. The Reason field of a Status object defines
                        what attributes will be set. Clients must ignore fields that
                        do not match the defined type of each attribute, and should
                        assume that any attribute may be empty, invalid, or under
                        defined.
                      properties:
                        causes:
                          description: The Causes array includes more details associated
                            with the StatusReason failure. Not all StatusReasons may
                            provide detailed causes.
                          items:
                            description: StatusCause provides more information about
                              an api.Status failure, including cases when multiple
                              errors are encountered.
                            properties:
                              field:
                                description: |-
                                  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

                                  Examples:
                                    "name" - the field "name" on the current resource
                                    "items[0].name" - the field "name" on the first array entry in "items"
                                type: string
                              message:
                                description: A human-readable description of the cause
                                  of the error.  This field may be presented as-is
                                  to a reader.
                                type: string
                              reason:
                                description: A machine-readable description of the
                                  cause of the error. If this value is empty there
                                  is no information available.
                                type: string
                          type: array
                        group:
                          description: The group attribute of the resource associated
                            with the status StatusReason.
                          type: string
                        kind:
                          description: 'The kind attribute of the resource associated
                            with the status StatusReason. On some operations may differ
                            from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: The name attribute of the resource associated
                            with the status StatusReason (when there is a single name
                            which can be described).
                          type: string
                        retryAfterSeconds:
                          description: If specified, the time in seconds before the
                            operation should be retried. Some errors may indicate
                            the client must take an alternate action - for those errors
                            this field may indicate how long to wait before taking
                            the alternate action.
                          format: int32
                          type: integer
                        uid:
                          description: 'UID of the resource. (when there is a single
                            resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                      type: string
                    message:
                      description: A human-readable description of the status of this
                        operation.
                      type: string
                    metadata:
                      description: ListMeta describes metadata that synthetic resources
                        must have, including lists and various status objects. A resource
                        may have only one of {ObjectMeta, ListMeta}.
                      properties:
                        continue:
                          description: continue may be set if the user set a limit
                            on the number of items returned, and indicates that the
                            server has more data available. The value is opaque and
                            may be used to issue another request to the endpoint that
                            served this list to retrieve the next set of available
                            objects. Continuing a consistent list may not be possible
                            if the server configuration has changed or more than a
                            few minutes have passed. The resourceVersion field returned
                            when using this continue value will be identical to the
                            value in the first response, unless you have received
                            this token from an error message.
                          type: string
                        resourceVersion:
                          description: 'String that identifies the server''s internal
                            version of this object that can be used by clients to
                            determine when objects have changed. Value must be treated
                            as opaque by clients and passed unmodified back to the
                            server. Populated by the system. Read-only. More info:
                            https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        selfLink:
                          description: selfLink is a URL representing this object.
                            Populated by the system. Read-only.
                          type: string
                    reason:
                      description: A machine-readable description of why this operation
                        is in the "Failure" status. If this value is empty there is
                        no information available. A Reason clarifies an HTTP status
                        code but does not override it.
                      type: string
                    status:
                      description: 'Status of the operation. One of: "Success" or
                        "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status'
                      type: string
              required:
              - pending
            labels:
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              maxLength: 63
              pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
              type: string
            namespace:
              description: |-
                Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

                Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
              type: string
            ownerReferences:
              description: List of objects depended by this object. If ALL objects
                in the list have been deleted, this object will be garbage collected.
                If this object is managed by a controller, then an entry in this list
                will point to this controller, with the controller field set to true.
                There cannot be more than one managing controller.
              items:
                description: OwnerReference contains enough information to let you
                  identify an owning object. Currently, an owning object must be in
                  the same namespace, so there is no namespace field.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  blockOwnerDeletion:
                    description: If true, AND if the owner has the "foregroundDeletion"
                      finalizer, then the owner cannot be deleted from the key-value
                      store until this reference is removed. Defaults to false. To
                      set this field, a user needs "delete" permission of the owner,
                      otherwise 422 (Unprocessable Entity) will be returned.
                    type: boolean
                  controller:
                    description: If true, this reference points to the managing controller.
                    type: boolean
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - uid
              type: array
            resourceVersion:
              description: |-
                An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

                Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
              type: string
            selfLink:
              description: SelfLink is a URL representing this object. Populated by
                the system. Read-only.
              type: string
            uid:
              description: |-
                UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

                Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
              type: string
        spec:
          description: IngressSpec describes the Ingress the user wishes to exist.
          properties:
            affinity:
              description: Affinity is a group of affinity scheduling rules.
              properties:
                nodeAffinity:
                  description: Node affinity is a group of node affinity scheduling
                    rules.
                  properties:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      description: The scheduler will prefer to schedule pods to nodes
                        that satisfy the affinity expressions specified by this field,
                        but it may choose a node that violates one or more of the
                        expressions. The node that is most preferred is the one with
                        the greatest sum of weights, i.e. for each node that meets
                        all of the scheduling requirements (resource request, requiredDuringScheduling
                        affinity expressions, etc.), compute a sum by iterating through
                        the elements of this field and adding "weight" to the sum
                        if the node matches the corresponding matchExpressions; the
                        node(s) with the highest sum are the most preferred.
                      items:
                        description: An empty preferred scheduling term matches all
                          objects with implicit weight 0 (i.e. it's a no-op). A null
                          preferred scheduling term matches no objects (i.e. is also
                          a no-op).
                        properties:
                          preference:
                            description: A null or empty node selector term matches
                              no objects. The requirements of them are ANDed. The
                              TopologySelectorTerm type implements a subset of the
                              NodeSelectorTerm.
                            properties:
                              matchExpressions:
                                description: A list of node selector requirements
                                  by node's labels.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchFields:
                                description: A list of node selector requirements
                                  by node's fields.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                          weight:
                            description: Weight associated with matching the corresponding
                              nodeSelectorTerm, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - weight
                        - preference
                      type: array
                    requiredDuringSchedulingIgnoredDuringExecution:
                      description: A node selector represents the union of the results
                        of one or more label queries over a set of nodes; that is,
                        it represents the OR of the selectors represented by the node
                        selector terms.
                      properties:
                        nodeSelectorTerms:
                          description: Required. A list of node selector terms. The
                            terms are ORed.
                          items:
                            description: A null or empty node selector term matches
                              no objects. The requirements of them are ANDed. The
                              TopologySelectorTerm type implements a subset of the
                              NodeSelectorTerm.
                            properties:
                              matchExpressions:
                                description: A list of node selector requirements
                                  by node's labels.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchFields:
                                description: A list of node selector requirements
                                  by node's fields.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                          type: array
                      required:
                      - nodeSelectorTerms
                podAffinity:
                  description: Pod affinity is a group of inter pod affinity scheduling
                    rules.
                  properties:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      description: The scheduler will prefer to schedule pods to nodes
                        that satisfy the affinity expressions specified by this field,
                        but it may choose a node that violates one or more of the
                        expressions. The node that is most preferred is the one with
                        the greatest sum of weights, i.e. for each node that meets
                        all of the scheduling requirements (resource request, requiredDuringScheduling
                        affinity expressions, etc.), compute a sum by iterating through
                        the elements of this field and adding "weight" to the sum
                        if the node has pods which matches the corresponding podAffinityTerm;
                        the node(s) with the highest sum are the most preferred.
                      items:
                        description: The weights of all of the matched WeightedPodAffinityTerm
                          fields are added per-node to find the most preferred node(s)
                        properties:
                          podAffinityTerm:
                            description: Defines a set of pods (namely those matching
                              the labelSelector relative to the given namespace(s))
                              that this pod should be co-located (affinity) or not
                              co-located (anti-affinity) with, where co-located is
                              defined as running on a node whose value of the label
                              with key <topologyKey> matches that of any node on which
                              a pod of the set of pods is running
                            properties:
                              labelSelector:
                                description: A label selector is a label query over
                                  a set of resources. The result of matchLabels and
                                  matchExpressions are ANDed. An empty label selector
                                  matches all objects. A null label selector matches
                                  no objects.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                    type: array
                                  matchLabels:
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                              namespaces:
                                description: namespaces specifies which namespaces
                                  the labelSelector applies to (matches against);
                                  null or empty list means "this pod's namespace"
                                items:
                                  type: string
                                type: array
                              topologyKey:
                                description: This pod should be co-located (affinity)
                                  or not co-located (anti-affinity) with the pods
                                  matching the labelSelector in the specified namespaces,
                                  where co-located is defined as running on a node
                                  whose value of the label with key topologyKey matches
                                  that of any node on which any of the selected pods
                                  is running. Empty topologyKey is not allowed.
                                type: string
                            required:
                            - topologyKey
                          weight:
                            description: weight associated with matching the corresponding
                              podAffinityTerm, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - weight
                        - podAffinityTerm
                      type: array
                    requiredDuringSchedulingIgnoredDuringExecution:
                      description: If the affinity requirements specified by this
                        field are not met at scheduling time, the pod will not be
                        scheduled onto the node. If the affinity requirements specified
                        by this field cease to be met at some point during pod execution
                        (e.g. due to a pod label update), the system may or may not
                        try to eventually evict the pod from its node. When there
                        are multiple elements, the lists of nodes corresponding to
                        each podAffinityTerm are intersected, i.e. all terms must
                        be satisfied.
                      items:
                        description: Defines a set of pods (namely those matching
                          the labelSelector relative to the given namespace(s)) that
                          this pod should be co-located (affinity) or not co-located
                          (anti-affinity) with, where co-located is defined as running
                          on a node whose value of the label with key <topologyKey>
                          matches that of any node on which a pod of the set of pods
                          is running
                        properties:
                          labelSelector:
                            description: A label selector is a label query over a
                              set of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchLabels:
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                          namespaces:
                            description: namespaces specifies which namespaces the
                              labelSelector applies to (matches against); null or
                              empty list means "this pod's namespace"
                            items:
                              type: string
                            type: array
                          topologyKey:
                            description: This pod should be co-located (affinity)
                              or not co-located (anti-affinity) with the pods matching
                              the labelSelector in the specified namespaces, where
                              co-located is defined as running on a node whose value
                              of the label with key topologyKey matches that of any
                              node on which any of the selected pods is running. Empty
                              topologyKey is not allowed.
                            type: string
                        required:
                        - topologyKey
                      type: array
                podAntiAffinity:
                  description: Pod anti affinity is a group of inter pod anti affinity
                    scheduling rules.
                  properties:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      description: The scheduler will prefer to schedule pods to nodes
                        that satisfy the anti-affinity expressions specified by this
                        field, but it may choose a node that violates one or more
                        of the expressions. The node that is most preferred is the
                        one with the greatest sum of weights, i.e. for each node that
                        meets all of the scheduling requirements (resource request,
                        requiredDuringScheduling anti-affinity expressions, etc.),
                        compute a sum by iterating through the elements of this field
                        and adding "weight" to the sum if the node has pods which
                        matches the corresponding podAffinityTerm; the node(s) with
                        the highest sum are the most preferred.
                      items:
                        description: The weights of all of the matched WeightedPodAffinityTerm
                          fields are added per-node to find the most preferred node(s)
                        properties:
                          podAffinityTerm:
                            description: Defines a set of pods (namely those matching
                              the labelSelector relative to the given namespace(s))
                              that this pod should be co-located (affinity) or not
                              co-located (anti-affinity) with, where co-located is
                              defined as running on a node whose value of the label
                              with key <topologyKey> matches that of any node on which
                              a pod of the set of pods is running
                            properties:
                              labelSelector:
                                description: A label selector is a label query over
                                  a set of resources. The result of matchLabels and
                                  matchExpressions are ANDed. An empty label selector
                                  matches all objects. A null label selector matches
                                  no objects.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                    type: array
                                  matchLabels:
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                              namespaces:
                                description: namespaces specifies which namespaces
                                  the labelSelector applies to (matches against);
                                  null or empty list means "this pod's namespace"
                                items:
                                  type: string
                                type: array
                              topologyKey:
                                description: This pod should be co-located (affinity)
                                  or not co-located (anti-affinity) with the pods
                                  matching the labelSelector in the specified namespaces,
                                  where co-located is defined as running on a node
                                  whose value of the label with key topologyKey matches
                                  that of any node on which any of the selected pods
                                  is running. Empty topologyKey is not allowed.
                                type: string
                            required:
                            - topologyKey
                          weight:
                            description: weight associated with matching the corresponding
                              podAffinityTerm, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - weight
                        - podAffinityTerm
                      type: array
                    requiredDuringSchedulingIgnoredDuringExecution:
                      description: If the anti-affinity requirements specified by
                        this field are not met at scheduling time, the pod will not
                        be scheduled onto the node. If the anti-affinity requirements
                        specified by this field cease to be met at some point during
                        pod execution (e.g. due to a pod label update), the system
                        may or may not try to eventually evict the pod from its node.
                        When there are multiple elements, the lists of nodes corresponding
                        to each podAffinityTerm are intersected, i.e. all terms must
                        be satisfied.
                      items:
                        description: Defines a set of pods (namely those matching
                          the labelSelector relative to the given namespace(s)) that
                          this pod should be co-located (affinity) or not co-located
                          (anti-affinity) with, where co-located is defined as running
                          on a node whose value of the label with key <topologyKey>
                          matches that of any node on which a pod of the set of pods
                          is running
                        properties:
                          labelSelector:
                            description: A label selector is a label query over a
                              set of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchLabels:
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                          namespaces:
                            description: namespaces specifies which namespaces the
                              labelSelector applies to (matches against); null or
                              empty list means "this pod's namespace"
                            items:
                              type: string
                            type: array
                          topologyKey:
                            description: This pod should be co-located (affinity)
                              or not co-located (anti-affinity) with the pods matching
                              the labelSelector in the specified namespaces, where
                              co-located is defined as running on a node whose value
                              of the label with key topologyKey matches that of any
                              node on which any of the selected pods is running. Empty
                              topologyKey is not allowed.
                            type: string
                        required:
                        - topologyKey
                      type: array
            backend:
              properties:
                alpn:
                  description: Application-Layer Protocol Negotiation (ALPN) is a
                    Transport Layer Security (TLS) extension for application layer
                    protocol negotiation. ALPN allows the application layer to negotiate
                    which protocol should be performed over a secure connection in
                    a manner which avoids additional round trips and which is independent
                    of the application layer protocols. It is used by HTTP/2. If provided
                    a list of alpn will be added to port as alpn option1,option2,...
                    If SecretName is Provided this secret will be used to terminate
                    SSL with alpn options. If Secret name is not provided backend
                    server is responsible for handling SSL. Note that, the order of
                    the options indicates the preference If the ALPN list contains
                    "h2",  "option http-use-htx" will be added to enable HTX mode
                    https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#option%20http-use-htx
                    https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#alpn
                  items:
                    type: string
                  type: array
                backendRules:
                  description: Serialized HAProxy rules to apply on server backend
                    including request, response or header rewrite. acls also can be
                    used. https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#1
                  items:
                    type: string
                  type: array
                headerRules:
                  description: |-
                    Header rules to modifies the header.

                    Deprecated: Use backendRule, will be removed.
                  items:
                    type: string
                  type: array
                hostNames:
                  description: Host names to forward traffic to. If empty traffic
                    will be forwarded to all subsets instance. If set only matched
                    hosts will get the traffic. This is an handy way to send traffic
                    to Specific StatefulSet pod. IE. Setting [web-0] will send traffic
                    to only web-0 host for this StatefulSet, https://kubernetes.io/docs/tasks/stateful-application/basic-stateful-set/#creating-a-statefulset
                  items:
                    type: string
                  type: array
                name:
                  description: User can specify backend name for using it with custom
                    acl Otherwise it will be generated
                  type: string
                proto:
                  description: HTTP protocol to use If the Proto contains "h2",  "option
                    http-use-htx" will be added to enable HTX mode https://www.haproxy.com/blog/haproxy-1-9-2-adds-grpc-support/
                  type: string
                rewriteRules:
                  description: |-
                    Path rewrite rules with haproxy formatted regex.

                    Deprecated: Use backendRule, will be removed.
                  items:
                    type: string
                  type: array
                serviceName:
                  description: Specifies the name of the referenced service.
                  type: string
                servicePort:
                  oneOf:
                  - type: string
                  - type: integer
            configVolumes:
              description: Config volumes are used to mount any secret or configmap
                into HAProxy pods.
              items:
                description: Represents the source of a volume to mount. Only one
                  of its members may be specified.
                properties:
                  configMap:
                    description: |-
                      Adapts a ConfigMap into a volume.

                      The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
                    properties:
                      defaultMode:
                        description: 'Optional: mode bits to use on created files
                          by default. Must be a value between 0 and 0777. Defaults
                          to 0644. Directories within the path are not affected by
                          this setting. This might be in conflict with other options
                          that affect the file mode, like fsGroup, and the result
                          can be other mode bits set.'
                        format: int32
                        type: integer
                      items:
                        description: If unspecified, each key-value pair in the Data
                          field of the referenced ConfigMap will be projected into
                          the volume as a file whose name is the key and content is
                          the value. If specified, the listed keys will be projected
                          into the specified paths, and unlisted keys will not be
                          present. If a key is specified which is not present in the
                          ConfigMap, the volume setup will error unless it is marked
                          optional. Paths must be relative and may not contain the
                          '..' path or start with '..'.
                        items:
                          description: Maps a string key to a path within a volume.
                          properties:
                            key:
                              description: The key to project.
                              type: string
                            mode:
                              description: 'Optional: mode bits to use on this file,
                                must be a value between 0 and 0777. If not specified,
                                the volume defaultMode will be used. This might be
                                in conflict with other options that affect the file
                                mode, like fsGroup, and the result can be other mode
                                bits set.'
                              format: int32
                              type: integer
                            path:
                              description: The relative path of the file to map the
                                key to. May not be an absolute path. May not contain
                                the path element '..'. May not start with the string
                                '..'.
                              type: string
                          required:
                          - key
                          - path
                        type: array
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the ConfigMap or it's keys must
                          be defined
                        type: boolean
                  mountPath:
                    description: Path within the container at which the volume should
                      be mounted.  Must not contain ':'.
                    type: string
                  name:
                    type: string
                  projected:
                    description: Represents a projected volume source
                    properties:
                      defaultMode:
                        description: Mode bits to use on created files by default.
                          Must be a value between 0 and 0777. Directories within the
                          path are not affected by this setting. This might be in
                          conflict with other options that affect the file mode, like
                          fsGroup, and the result can be other mode bits set.
                        format: int32
                        type: integer
                      sources:
                        description: list of volume projections
                        items:
                          description: Projection that may be projected along with
                            other supported volume types
                          properties:
                            configMap:
                              description: |-
                                Adapts a ConfigMap into a projected volume.

                                The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
                              properties:
                                items:
                                  description: If unspecified, each key-value pair
                                    in the Data field of the referenced ConfigMap
                                    will be projected into the volume as a file whose
                                    name is the key and content is the value. If specified,
                                    the listed keys will be projected into the specified
                                    paths, and unlisted keys will not be present.
                                    If a key is specified which is not present in
                                    the ConfigMap, the volume setup will error unless
                                    it is marked optional. Paths must be relative
                                    and may not contain the '..' path or start with
                                    '..'.
                                  items:
                                    description: Maps a string key to a path within
                                      a volume.
                                    properties:
                                      key:
                                        description: The key to project.
                                        type: string
                                      mode:
                                        description: 'Optional: mode bits to use on
                                          this file, must be a value between 0 and
                                          0777. If not specified, the volume defaultMode
                                          will be used. This might be in conflict
                                          with other options that affect the file
                                          mode, like fsGroup, and the result can be
                                          other mode bits set.'
                                        format: int32
                                        type: integer
                                      path:
                                        description: The relative path of the file
                                          to map the key to. May not be an absolute
                                          path. May not contain the path element '..'.
                                          May not start with the string '..'.
                                        type: string
                                    required:
                                    - key
                                    - path
                                  type: array
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                optional:
                                  description: Specify whether the ConfigMap or it's
                                    keys must be defined
                                  type: boolean
                            downwardAPI:
                              description: Represents downward API info for projecting
                                into a projected volume. Note that this is identical
                                to a downwardAPI volume source without the default
                                mode.
                              properties:
                                items:
                                  description: Items is a list of DownwardAPIVolume
                                    file
                                  items:
                                    description: DownwardAPIVolumeFile represents
                                      information to create the file containing the
                                      pod field
                                    properties:
                                      fieldRef:
                                        description: ObjectFieldSelector selects an
                                          APIVersioned field of an object.
                                        properties:
                                          apiVersion:
                                            description: Version of the schema the
                                              FieldPath is written in terms of, defaults
                                              to "v1".
                                            type: string
                                          fieldPath:
                                            description: Path of the field to select
                                              in the specified API version.
                                            type: string
                                        required:
                                        - fieldPath
                                      mode:
                                        description: 'Optional: mode bits to use on
                                          this file, must be a value between 0 and
                                          0777. If not specified, the volume defaultMode
                                          will be used. This might be in conflict
                                          with other options that affect the file
                                          mode, like fsGroup, and the result can be
                                          other mode bits set.'
                                        format: int32
                                        type: integer
                                      path:
                                        description: 'Required: Path is  the relative
                                          path name of the file to be created. Must
                                          not be absolute or contain the ''..'' path.
                                          Must be utf-8 encoded. The first item of
                                          the relative path must not start with ''..'''
                                        type: string
                                      resourceFieldRef:
                                        description: ResourceFieldSelector represents
                                          container resources (cpu, memory) and their
                                          output format
                                        properties:
                                          containerName:
                                            description: 'Container name: required
                                              for volumes, optional for env vars'
                                            type: string
                                          divisor:
                                            description: |-
                                              Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and Int64() accessors.

                                              The serialization format is:

                                              <quantity>        ::= <signedNumber><suffix>
                                                (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                              <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                                (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                              <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                                (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                              <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                              No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                              When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                              Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                                a. No precision is lost
                                                b. No fractional digits will be emitted
                                                c. The exponent (or suffix) is as large as possible.
                                              The sign will be omitted unless the number is negative.

                                              Examples:
                                                1.5 will be serialized as "1500m"
                                                1.5Gi will be serialized as "1536Mi"

                                              Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                              Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                              This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                            type: string
                                          resource:
                                            description: 'Required: resource to select'
                                            type: string
                                        required:
                                        - resource
                                    required:
                                    - path
                                  type: array
                            secret:
                              description: |-
                                Adapts a secret into a projected volume.

                                The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
                              properties:
                                items:
                                  description: If unspecified, each key-value pair
                                    in the Data field of the referenced Secret will
                                    be projected into the volume as a file whose name
                                    is the key and content is the value. If specified,
                                    the listed keys will be projected into the specified
                                    paths, and unlisted keys will not be present.
                                    If a key is specified which is not present in
                                    the Secret, the volume setup will error unless
                                    it is marked optional. Paths must be relative
                                    and may not contain the '..' path or start with
                                    '..'.
                                  items:
                                    description: Maps a string key to a path within
                                      a volume.
                                    properties:
                                      key:
                                        description: The key to project.
                                        type: string
                                      mode:
                                        description: 'Optional: mode bits to use on
                                          this file, must be a value between 0 and
                                          0777. If not specified, the volume defaultMode
                                          will be used. This might be in conflict
                                          with other options that affect the file
                                          mode, like fsGroup, and the result can be
                                          other mode bits set.'
                                        format: int32
                                        type: integer
                                      path:
                                        description: The relative path of the file
                                          to map the key to. May not be an absolute
                                          path. May not contain the path element '..'.
                                          May not start with the string '..'.
                                        type: string
                                    required:
                                    - key
                                    - path
                                  type: array
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                            serviceAccountToken:
                              description: ServiceAccountTokenProjection represents
                                a projected service account token volume. This projection
                                can be used to insert a service account token into
                                the pods runtime filesystem for use against APIs (Kubernetes
                                API Server or otherwise).
                              properties:
                                audience:
                                  description: Audience is the intended audience of
                                    the token. A recipient of a token must identify
                                    itself with an identifier specified in the audience
                                    of the token, and otherwise should reject the
                                    token. The audience defaults to the identifier
                                    of the apiserver.
                                  type: string
                                expirationSeconds:
                                  description: ExpirationSeconds is the requested
                                    duration of validity of the service account token.
                                    As the token approaches expiration, the kubelet
                                    volume plugin will proactively rotate the service
                                    account token. The kubelet will start trying to
                                    rotate the token if the token is older than 80
                                    percent of its time to live or if the token is
                                    older than 24 hours.Defaults to 1 hour and must
                                    be at least 10 minutes.
                                  format: int64
                                  type: integer
                                path:
                                  description: Path is the path relative to the mount
                                    point of the file to project the token into.
                                  type: string
                              required:
                              - path
                        type: array
                    required:
                    - sources
                  secret:
                    description: |-
                      Adapts a Secret into a volume.

                      The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
                    properties:
                      defaultMode:
                        description: 'Optional: mode bits to use on created files
                          by default. Must be a value between 0 and 0777. Defaults
                          to 0644. Directories within the path are not affected by
                          this setting. This might be in conflict with other options
                          that affect the file mode, like fsGroup, and the result
                          can be other mode bits set.'
                        format: int32
                        type: integer
                      items:
                        description: If unspecified, each key-value pair in the Data
                          field of the referenced Secret will be projected into the
                          volume as a file whose name is the key and content is the
                          value. If specified, the listed keys will be projected into
                          the specified paths, and unlisted keys will not be present.
                          If a key is specified which is not present in the Secret,
                          the volume setup will error unless it is marked optional.
                          Paths must be relative and may not contain the '..' path
                          or start with '..'.
                        items:
                          description: Maps a string key to a path within a volume.
                          properties:
                            key:
                              description: The key to project.
                              type: string
                            mode:
                              description: 'Optional: mode bits to use on this file,
                                must be a value between 0 and 0777. If not specified,
                                the volume defaultMode will be used. This might be
                                in conflict with other options that affect the file
                                mode, like fsGroup, and the result can be other mode
                                bits set.'
                              format: int32
                              type: integer
                            path:
                              description: The relative path of the file to map the
                                key to. May not be an absolute path. May not contain
                                the path element '..'. May not start with the string
                                '..'.
                              type: string
                          required:
                          - key
                          - path
                        type: array
                      optional:
                        description: Specify whether the Secret or it's keys must
                          be defined
                        type: boolean
                      secretName:
                        description: 'Name of the secret in the pod''s namespace to
                          use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                        type: string
                required:
                - mountPath
              type: array
            externalIPs:
              description: externalIPs is a list of IP addresses for which nodes in
                the cluster will also accept traffic for this service.  These IPs
                are not managed by Kubernetes.  The user is responsible for ensuring
                that traffic arrives at a node with this IP.  A common example is
                external load-balancers that are not part of the Kubernetes system.
              items:
                type: string
              type: array
            frontendRules:
              description: Frontend rules specifies a set of rules that should be
                applied in HAProxy frontend configuration. The set of keywords are
                from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1
                Only frontend sections can be applied here. It is up to user to provide
                valid set of rules. This allows acls or other options in frontend
                sections in HAProxy config. Frontend rules will be mapped with Ingress
                Rules according to port.
              items:
                properties:
                  auth:
                    properties:
                      basic:
                        properties:
                          realm:
                            type: string
                          secretName:
                            type: string
                      oauth:
                        items:
                          properties:
                            authBackend:
                              type: string
                            authPath:
                              type: string
                            host:
                              type: string
                            paths:
                              items:
                                type: string
                              type: array
                            signinPath:
                              type: string
                        type: array
                      tls:
                        properties:
                          errorPage:
                            type: string
                          headers:
                            type: object
                          secretName:
                            type: string
                          verifyClient:
                            type: string
                  port:
                    oneOf:
                    - type: string
                    - type: integer
                  rules:
                    description: Serialized rules
                    items:
                      type: string
                    type: array
              type: array
            imagePullSecrets:
              description: 'ImagePullSecrets is an optional list of references to
                secrets in the same namespace to use for pulling any of the images
                used by this PodSpec. If specified, these secrets will be passed to
                individual puller implementations for them to use. For example, in
                the case of docker, only DockerConfig type secrets are honored. More
                info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
              items:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
              type: array
            livenessProbe:
              description: Probe describes a health check to be performed against
                a container to determine whether it is alive or ready to receive traffic.
              properties:
                exec:
                  description: ExecAction describes a "run in container" action.
                  properties:
                    command:
                      description: Command is the command line to execute inside the
                        container, the working directory for the command  is root
                        ('/') in the container's filesystem. The command is simply
                        exec'd, it is not run inside a shell, so traditional shell
                        instructions ('|', etc) won't work. To use a shell, you need
                        to explicitly call out to that shell. Exit status of 0 is
                        treated as live/healthy and non-zero is unhealthy.
                      items:
                        type: string
                      type: array
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered
                    failed after having succeeded. Defaults to 3. Minimum value is
                    1.
                  format: int32
                  type: integer
                httpGet:
                  description: HTTPGetAction describes an action based on HTTP Get
                    requests.
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP.
                        You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows
                        repeated headers.
                      items:
                        description: HTTPHeader describes a custom header to be used
                          in HTTP probes
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                        required:
                        - name
                        - value
                      type: array
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      oneOf:
                      - type: string
                      - type: integer
                    scheme:
                      description: Scheme to use for connecting to the host. Defaults
                        to HTTP.
                      type: string
                  required:
                  - port
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started
                    before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default
                    to 10 seconds. Minimum value is 1.
                  format: int32
                  type: integer
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered
                    successful after having failed. Defaults to 1. Must be 1 for liveness.
                    Minimum value is 1.
                  format: int32
                  type: integer
                tcpSocket:
                  description: TCPSocketAction describes an action based on opening
                    a socket
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to
                        the pod IP.'
                      type: string
                    port:
                      oneOf:
                      - type: string
                      - type: integer
                  required:
                  - port
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out.
                    Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
            loadBalancerSourceRanges:
              description: 'Optional: If specified and supported by the platform,
                this will restrict traffic through the cloud-provider load-balancer
                will be restricted to the specified client IPs. This field will be
                ignored if the cloud-provider does not support the feature. https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
              items:
                type: string
              type: array
            nodeSelector:
              description: 'NodeSelector is a selector which must be true for the
                pod to fit on a node. Selector which must match a node''s labels for
                the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
              type: object
            priority:
              description: The priority value. Various system components use this
                field to find the priority of the pod. When Priority Admission Controller
                is enabled, it prevents users from setting this field. The admission
                controller populates this field from PriorityClassName. The higher
                the value, the higher the priority.
              format: int32
              type: integer
            priorityClassName:
              description: If specified, indicates the pod's priority. "system-node-critical"
                and "system-cluster-critical" are two special keywords which indicate
                the highest priorities with the former being the highest priority.
                Any other name must be defined by creating a PriorityClass object
                with that name. If not specified, the pod priority will be default
                or zero if there is no default.
              type: string
            readinessProbe:
              description: Probe describes a health check to be performed against
                a container to determine whether it is alive or ready to receive traffic.
              properties:
                exec:
                  description: ExecAction describes a "run in container" action.
                  properties:
                    command:
                      description: Command is the command line to execute inside the
                        container, the working directory for the command  is root
                        ('/') in the container's filesystem. The command is simply
                        exec'd, it is not run inside a shell, so traditional shell
                        instructions ('|', etc) won't work. To use a shell, you need
                        to explicitly call out to that shell. Exit status of 0 is
                        treated as live/healthy and non-zero is unhealthy.
                      items:
                        type: string
                      type: array
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered
                    failed after having succeeded. Defaults to 3. Minimum value is
                    1.
                  format: int32
                  type: integer
                httpGet:
                  description: HTTPGetAction describes an action based on HTTP Get
                    requests.
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP.
                        You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows
                        repeated headers.
                      items:
                        description: HTTPHeader describes a custom header to be used
                          in HTTP probes
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                        required:
                        - name
                        - value
                      type: array
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      oneOf:
                      - type: string
                      - type: integer
                    scheme:
                      description: Scheme to use for connecting to the host. Defaults
                        to HTTP.
                      type: string
                  required:
                  - port
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started
                    before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default
                    to 10 seconds. Minimum value is 1.
                  format: int32
                  type: integer
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered
                    successful after having failed. Defaults to 1. Must be 1 for liveness.
                    Minimum value is 1.
                  format: int32
                  type: integer
                tcpSocket:
                  description: TCPSocketAction describes an action based on opening
                    a socket
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to
                        the pod IP.'
                      type: string
                    port:
                      oneOf:
                      - type: string
                      - type: integer
                  required:
                  - port
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out.
                    Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
            resources:
              description: ResourceRequirements describes the compute resource requirements.
              properties:
                limits:
                  description: 'Limits describes the maximum amount of compute resources
                    allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                  type: object
                requests:
                  description: 'Requests describes the minimum amount of compute resources
                    required. If Requests is omitted for a container, it defaults
                    to Limits if that is explicitly specified, otherwise to an implementation-defined
                    value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                  type: object
            rules:
              description: A list of host rules used to configure the Ingress. If
                unspecified, or no rule matches, all traffic is sent to the default
                backend.
              items:
                description: IngressRule represents the rules mapping the paths under
                  a specified host to the related backend services. Incoming requests
                  are first evaluated for a host match, then routed to the backend
                  associated with the matching IngressRuleValue.
                properties:
                  host:
                    description: "Host is the fully qualified domain name of a network
                      host, as defined by RFC 3986. Note the following deviations
                      from the \"host\" part of the URI as defined in the RFC: 1.
                      IPs are not allowed. Currently an IngressRuleValue can only
                      apply to the\n\t  IP in the Spec of the parent Ingress.\n2.
                      The `:` delimiter is not respected because ports are not allowed.\n\t
                      \ Currently the port of an Ingress is implicitly :80 for http
                      and\n\t  :443 for https.\nBoth these may change in the future.
                      Incoming requests are matched against the host before the IngressRuleValue.
                      If the host is unspecified, the Ingress routes all traffic based
                      on the specified IngressRuleValue."
                    type: string
                  http:
                    description: 'HTTPIngressRuleValue is a list of http selectors
                      pointing to backends. In the example: http://<host>/<path>?<searchpart>
                      -> backend where where parts of the url correspond to RFC 3986,
                      this resource will be used to match against everything after
                      the last ''/'' and before the first ''?'' or ''#''.'
                    properties:
                      address:
                        description: The network address to listen HTTP(s) connections
                          on.
                        type: string
                      alpn:
                        description: Application-Layer Protocol Negotiation (ALPN)
                          is a Transport Layer Security (TLS) extension for application
                          layer protocol negotiation. ALPN allows the application
                          layer to negotiate which protocol should be performed over
                          a secure connection in a manner which avoids additional
                          round trips and which is independent of the application
                          layer protocols. It is used by HTTP/2. If provided a list
                          of alpn will be added to port as alpn option1,option2,...
                          If SecretName is Provided this secret will be used to terminate
                          SSL with alpn options. If Secret name is not provided backend
                          server is responsible for handling SSL. Note that, the order
                          of the options indicates the preference If the ALPN list
                          contains "h2",  "option http-use-htx" will be added to enable
                          HTX mode https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#option%20http-use-htx
                          https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#alpn
                        items:
                          type: string
                        type: array
                      noTLS:
                        description: Set noTLS = true to force plain text. Else, auto
                          detect like present
                        type: boolean
                      nodePort:
                        oneOf:
                        - type: string
                        - type: integer
                      paths:
                        description: A collection of paths that map requests to backends.
                        items:
                          description: HTTPIngressPath associates a path regex with
                            a backend. Incoming urls matching the path are forwarded
                            to the backend.
                          properties:
                            backend:
                              properties:
                                alpn:
                                  description: Application-Layer Protocol Negotiation
                                    (ALPN) is a Transport Layer Security (TLS) extension
                                    for application layer protocol negotiation. ALPN
                                    allows the application layer to negotiate which
                                    protocol should be performed over a secure connection
                                    in a manner which avoids additional round trips
                                    and which is independent of the application layer
                                    protocols. It is used by HTTP/2. If provided a
                                    list of alpn will be added to port as alpn option1,option2,...
                                    If SecretName is Provided this secret will be
                                    used to terminate SSL with alpn options. If Secret
                                    name is not provided backend server is responsible
                                    for handling SSL. Note that, the order of the
                                    options indicates the preference If the ALPN list
                                    contains "h2",  "option http-use-htx" will be
                                    added to enable HTX mode https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#option%20http-use-htx
                                    https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#alpn
                                  items:
                                    type: string
                                  type: array
                                backendRules:
                                  description: Serialized HAProxy rules to apply on
                                    server backend including request, response or
                                    header rewrite. acls also can be used. https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#1
                                  items:
                                    type: string
                                  type: array
                                headerRules:
                                  description: |-
                                    Header rules to modifies the header.

                                    Deprecated: Use backendRule, will be removed.
                                  items:
                                    type: string
                                  type: array
                                hostNames:
                                  description: Host names to forward traffic to. If
                                    empty traffic will be forwarded to all subsets
                                    instance. If set only matched hosts will get the
                                    traffic. This is an handy way to send traffic
                                    to Specific StatefulSet pod. IE. Setting [web-0]
                                    will send traffic to only web-0 host for this
                                    StatefulSet, https://kubernetes.io/docs/tasks/stateful-application/basic-stateful-set/#creating-a-statefulset
                                  items:
                                    type: string
                                  type: array
                                name:
                                  description: User can specify backend name for using
                                    it with custom acl Otherwise it will be generated
                                  type: string
                                proto:
                                  description: HTTP protocol to use If the Proto contains
                                    "h2",  "option http-use-htx" will be added to
                                    enable HTX mode https://www.haproxy.com/blog/haproxy-1-9-2-adds-grpc-support/
                                  type: string
                                rewriteRules:
                                  description: |-
                                    Path rewrite rules with haproxy formatted regex.

                                    Deprecated: Use backendRule, will be removed.
                                  items:
                                    type: string
                                  type: array
                                serviceName:
                                  description: Specifies the name of the referenced
                                    service.
                                  type: string
                                servicePort:
                                  oneOf:
                                  - type: string
                                  - type: integer
                            path:
                              description: Path is a extended POSIX regex as defined
                                by IEEE Std 1003.1, (i.e this follows the egrep/unix
                                syntax, not the perl syntax) matched against the path
                                of an incoming request. Currently it can contain characters
                                disallowed from the conventional "path" part of a
                                URL as defined by RFC 3986. Paths must begin with
                                a '/'. If unspecified, the path defaults to a catch
                                all sending traffic to the backend.
                              type: string
                        type: array
                      port:
                        oneOf:
                        - type: string
                        - type: integer
                      proto:
                        description: HTTP protocol to use If the Proto contains "h2",  "option
                          http-use-htx" will be added to enable HTX mode https://www.haproxy.com/blog/haproxy-1-9-2-adds-grpc-support/
                        type: string
                    required:
                    - paths
                  tcp:
                    properties:
                      address:
                        description: The network address to listen TCP connections
                          on.
                        type: string
                      alpn:
                        description: Application-Layer Protocol Negotiation (ALPN)
                          is a Transport Layer Security (TLS) extension for application
                          layer protocol negotiation. ALPN allows the application
                          layer to negotiate which protocol should be performed over
                          a secure connection in a manner which avoids additional
                          round trips and which is independent of the application
                          layer protocols. It is used by HTTP/2. If provided a list
                          of alpn will be added to port as alpn option1,option2,...
                          If SecretName is Provided this secret will be used to terminate
                          SSL with alpn options. If Secret name is not provided backend
                          server is responsible for handling SSL. Note that, the order
                          of the options indicates the preference If the ALPN list
                          contains "h2",  "option http-use-htx" will be added to enable
                          HTX mode https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#option%20http-use-htx
                          https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#alpn
                        items:
                          type: string
                        type: array
                      backend:
                        description: IngressBackend describes all endpoints for a
                          given service and port.
                        properties:
                          alpn:
                            description: Application-Layer Protocol Negotiation (ALPN)
                              is a Transport Layer Security (TLS) extension for application
                              layer protocol negotiation. ALPN allows the application
                              layer to negotiate which protocol should be performed
                              over a secure connection in a manner which avoids additional
                              round trips and which is independent of the application
                              layer protocols. It is used by HTTP/2. If provided a
                              list of alpn will be added to port as alpn option1,option2,...
                              If SecretName is Provided this secret will be used to
                              terminate SSL with alpn options. If Secret name is not
                              provided backend server is responsible for handling
                              SSL. Note that, the order of the options indicates the
                              preference If the ALPN list contains "h2",  "option
                              http-use-htx" will be added to enable HTX mode https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#option%20http-use-htx
                              https://cbonte.github.io/haproxy-dconv/1.9/configuration.html#alpn
                            items:
                              type: string
                            type: array
                          backendRules:
                            description: Serialized HAProxy rules to apply on server
                              backend including request, response or header rewrite.
                              acls also can be used. https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#1
                            items:
                              type: string
                            type: array
                          hostNames:
                            description: Host names to forward traffic to. If empty
                              traffic will be forwarded to all subsets instance. If
                              set only matched hosts will get the traffic. This is
                              an handy way to send traffic to Specific StatefulSet
                              pod. IE. Setting [web-0] will send traffic to only web-0
                              host for this StatefulSet, https://kubernetes.io/docs/tasks/stateful-application/basic-stateful-set/#creating-a-statefulset
                            items:
                              type: string
                            type: array
                          name:
                            description: User can specify backend name for using it
                              with custom acl Otherwise it will be generated
                            type: string
                          proto:
                            description: HTTP protocol to use If the Proto contains
                              "h2",  "option http-use-htx" will be added to enable
                              HTX mode https://www.haproxy.com/blog/haproxy-1-9-2-adds-grpc-support/
                            type: string
                          serviceName:
                            description: Specifies the name of the referenced service.
                            type: string
                          servicePort:
                            oneOf:
                            - type: string
                            - type: integer
                      noTLS:
                        description: Set noTLS = true to force plain text. Else, auto
                          detect like present
                        type: boolean
                      nodePort:
                        oneOf:
                        - type: string
                        - type: integer
                      port:
                        oneOf:
                        - type: string
                        - type: integer
                      proto:
                        description: HTTP protocol to use If the Proto contains "h2",  "option
                          http-use-htx" will be added to enable HTX mode https://www.haproxy.com/blog/haproxy-1-9-2-adds-grpc-support/
                        type: string
              type: array
            schedulerName:
              description: If specified, the pod will be dispatched by specified scheduler.
                If not specified, the pod will be dispatched by default scheduler.
              type: string
            securityContext:
              description: PodSecurityContext holds pod-level security attributes
                and common container settings. Some fields are also present in container.securityContext.  Field
                values of container.securityContext take precedence over field values
                of PodSecurityContext.
              properties:
                fsGroup:
                  description: |-
                    A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:

                    1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----

                    If unset, the Kubelet will not modify the ownership and permissions of any volume.
                  format: int64
                  type: integer
                runAsGroup:
                  description: The GID to run the entrypoint of the container process.
                    Uses runtime default if unset. May also be set in SecurityContext.  If
                    set in both SecurityContext and PodSecurityContext, the value
                    specified in SecurityContext takes precedence for that container.
                  format: int64
                  type: integer
                runAsNonRoot:
                  description: Indicates that the container must run as a non-root
                    user. If true, the Kubelet will validate the image at runtime
                    to ensure that it does not run as UID 0 (root) and fail to start
                    the container if it does. If unset or false, no such validation
                    will be performed. May also be set in SecurityContext.  If set
                    in both SecurityContext and PodSecurityContext, the value specified
                    in SecurityContext takes precedence.
                  type: boolean
                runAsUser:
                  description: The UID to run the entrypoint of the container process.
                    Defaults to user specified in image metadata if unspecified. May
                    also be set in SecurityContext.  If set in both SecurityContext
                    and PodSecurityContext, the value specified in SecurityContext
                    takes precedence for that container.
                  format: int64
                  type: integer
                seLinuxOptions:
                  description: SELinuxOptions are the labels to be applied to the
                    container
                  properties:
                    level:
                      description: Level is SELinux level label that applies to the
                        container.
                      type: string
                    role:
                      description: Role is a SELinux role label that applies to the
                        container.
                      type: string
                    type:
                      description: Type is a SELinux type label that applies to the
                        container.
                      type: string
                    user:
                      description: User is a SELinux user label that applies to the
                        container.
                      type: string
                supplementalGroups:
                  description: A list of groups applied to the first process run in
                    each container, in addition to the container's primary GID.  If
                    unspecified, no groups will be added to any container.
                  items:
                    format: int64
                    type: integer
                  type: array
                sysctls:
                  description: Sysctls hold a list of namespaced sysctls used for
                    the pod. Pods with unsupported sysctls (by the container runtime)
                    might fail to launch.
                  items:
                    description: Sysctl defines a kernel parameter to be set
                    properties:
                      name:
                        description: Name of a property to set
                        type: string
                      value:
                        description: Value of a property to set
                        type: string
                    required:
                    - name
                    - value
                  type: array
            terminationGracePeriodSeconds:
              description: Set this value longer than the expected cleanup time for
                your process. Defaults to 30 seconds.
              format: int64
              type: integer
            tls:
              description: TLS is the TLS configuration. Currently the Ingress only
                supports a single TLS port, 443, and assumes TLS termination. If multiple
                members of this list specify different hosts, they will be multiplexed
                on the same port according to the hostname specified through the SNI
                TLS extension.
              items:
                description: IngressTLS describes the transport layer security associated
                  with an Ingress.
                properties:
                  hosts:
                    description: Hosts are a list of hosts included in the TLS certificate.
                      The values in this list must match the name/s used in the tlsSecret.
                      Defaults to the wildcard host setting for the loadbalancer controller
                      fulfilling this Ingress, if left unspecified.
                    items:
                      type: string
                    type: array
                  ref:
                    description: LocalTypedReference contains enough information to
                      let you inspect or modify the referred object.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                  secretName:
                    description: SecretName is the name of the secret used to terminate
                      SSL traffic on 443. Field is left optional to allow SSL routing
                      based on SNI hostname alone. If the SNI host in a listener conflicts
                      with the "Host" header field used by an IngressRule, the SNI
                      host is used for termination and value of the Host header is
                      used for routing. Deprecated
                    type: string
              type: array
            tolerations:
              description: If specified, the pod's tolerations.
              items:
                description: The pod this Toleration is attached to tolerates any
                  taint that matches the triple <key,value,effect> using the matching
                  operator <operator>.
                properties:
                  effect:
                    description: Effect indicates the taint effect to match. Empty
                      means match all taint effects. When specified, allowed values
                      are NoSchedule, PreferNoSchedule and NoExecute.
                    type: string
                  key:
                    description: Key is the taint key that the toleration applies
                      to. Empty means match all taint keys. If the key is empty, operator
                      must be Exists; this combination means to match all values and
                      all keys.
                    type: string
                  operator:
                    description: Operator represents a key's relationship to the value.
                      Valid operators are Exists and Equal. Defaults to Equal. Exists
                      is equivalent to wildcard for value, so that a pod can tolerate
                      all taints of a particular category.
                    type: string
                  tolerationSeconds:
                    description: TolerationSeconds represents the period of time the
                      toleration (which must be of effect NoExecute, otherwise this
                      field is ignored) tolerates the taint. By default, it is not
                      set, which means tolerate the taint forever (do not evict).
                      Zero and negative values will be treated as 0 (evict immediately)
                      by the system.
                    format: int64
                    type: integer
                  value:
                    description: Value is the taint value the toleration matches to.
                      If the operator is Exists, the value should be empty, otherwise
                      just a regular string.
                    type: string
              type: array
        status:
          description: IngressStatus describe the current state of the Ingress.
          properties:
            loadBalancer:
              description: LoadBalancerStatus represents the status of a load-balancer.
              properties:
                ingress:
                  description: Ingress is a list containing ingress points for the
                    load-balancer. Traffic intended for the service should be sent
                    to these ingress points.
                  items:
                    description: 'LoadBalancerIngress represents the status of a load-balancer
                      ingress point: traffic intended for the service should be sent
                      to an ingress point.'
                    properties:
                      hostname:
                        description: Hostname is set for load-balancer ingress points
                          that are DNS based (typically AWS load-balancers)
                        type: string
                      ip:
                        description: IP is set for load-balancer ingress points that
                          are IP based (typically GCE or OpenStack load-balancers)
                        type: string
                  type: array
            observedGeneration:
              oneOf:
              - type: string
              - format: int64
                type: integer
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
